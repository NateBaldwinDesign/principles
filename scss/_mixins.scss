//==============================================================================
// Helper function(s)
//==============================================================================

// Check if value is an integer and returns true or false
@function is-int($number) {
  @return type-of($number) == number and floor(abs($number)) == abs($number);
}

// Returns a number without a unit. For example 16px becomes 16
@function stripUnits($number) {
  @return $number / ($number * 0 + 1);
}

// Returns an EM value. For example 24px becomes 1.5em
@function emCalc($target, $context: $base-font-size) {
  @return stripUnits(($target / $context)) + 0em;
}

// Returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
@function emRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn  #{$lines} + $not-integer-txt;
  }
  @return (stripUnits($lines) * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Returns a unitless number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
@function unitlessRhythm($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn #{$lines} + $not-integer-txt;
  }
  @return ($lines * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size));
}

//==============================================================================
// Mixin(s)
//==============================================================================
// Finally, the tools that you can use throughout your project to set
// all the wonderful type related stuffs.

// Sets the type in EMs and makes a vertical rhythm unitless line-height that is
// based on context.
@mixin setType($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  font-size: $font-size;
  line-height: unitlessRhythm($lines, $font-size, $silent);
}

// Creates a vertical rhythm unitless line-height that is based on context
@mixin setLeading($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  line-height: unitlessRhythm($lines, $font-size, $silent);
}

// Creates a pixel width border top with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin rhythmBorderTop($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {
  border-top-width: $border-width;
  padding-top: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Creates a pixel width border bottom with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin rhythmBorderBottom($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {
  border-bottom-width: $border-width;
  padding-bottom: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Creates a pixel width border with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin rhythmBorder($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size) {
  border-width: $border-width;
  padding: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Creates base type baseline overlay and vertical unit overlay.
// To use on the body tag for example: body { @include debug-vertical-alignment(); } and add class va-debug to the body tag
@mixin debug-vertical-alignment($opacity: 0.8, $vertical-unit: $base-vertical-unit, $type-base-line-multi: $base-line-multi, $type-size: $base-em-font-size) {
  position: relative;

  &:before, &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    display: none;
  }

  &:before {
    z-index: 10;
    background-image: -webkit-linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% (unitlessRhythm($type-base-line-multi, $type-size) + 0rem);
  }

  &:after {
    z-index: 9;
    background-image: -webkit-linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% $vertical-unit;
  }

  &.va-debug:before, &.va-debug:after {
    display: block;
    pointer-events: none;
  }
}

//-------------------------------------------//
/* Sass Mixin that generates a Baseline Grid */
/* by: Mike Morrison, Soholaunch.com */
/* You don't have to leave this credit comment in, but it would be nice of you. */

// Set your grid dimensions here
$body-width: 960px;
@mixin baseline-grid {
  $columns: 16;
  $column-color: rgba(200,0,0,.2);
  $baseline-color: rgba(56,255,255,.8);
  
  // These are all automatically calculated
  $gutter-width: $global-margin;  // Change if you like
  $gutters: ($columns - 1);
  $column-width: $body-width / $columns;
  
  background-image: -moz-linear-gradient(0deg, $column-color $column-width, transparent $gutter-width),
              -moz-linear-gradient(top, rgba(0,0,0,0) 95%, $baseline-color 100%);
  background-image: -o-linear-gradient(0deg, $column-color $column-width, transparent $gutter-width),
              -o-linear-gradient(top, rgba(0,0,0,0) 95%, $baseline-color 100%);
  background-image: -webkit-linear-gradient(0deg, $column-color $column-width, transparent $gutter-width),
              -webkit-linear-gradient(top, rgba(0,0,0,0) 95%, $baseline-color 100%);
  background-size: ($column-width + $gutter-width) 100%, 100% $base-line-height;
  background-position: 10px 0px; // Use to offset and center your grid
}

// Display Grids
body {
  @include baseline-grid;
}